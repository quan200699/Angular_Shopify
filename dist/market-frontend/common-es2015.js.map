{"version":3,"sources":["./src/app/helper/auth-guard.ts","./src/app/service/warehouse/warehouse.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AAUhB;AAEoD;AAK7E,IAAa,SAAS,GAAtB,MAAa,SAAS;IAGpB,YAAoB,MAAc,EACd,WAAkC;QADlC,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAuB;QACpD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CACpC,IAAI,CAAC,EAAE;YACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC,CACF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,IAA4B,EAAE,KAA0B;QAClE,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;aAAM;YACL,8DAA8D;YAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAC,WAAW,EAAE,EAAC,SAAS,EAAE,KAAK,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;YAC5E,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,gBAAgB,CAAC,IAA4B,EAAE,KAA0B;QACvE,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;aAAM;YACL,8DAA8D;YAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,EAAC,WAAW,EAAE,EAAC,SAAS,EAAE,KAAK,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;YACrF,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,OAAO,CAAC,KAAY,EAAE,QAAsB;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;CACF;;YAhC6B,sDAAM;YACD,0FAAqB;;AAJ3C,SAAS;IAHrB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,SAAS,CAmCrB;AAnCqB;;;;;;;;;;;;;;;;;;;;ACjBmB;AACO;AAEc;AAG9D,MAAM,OAAO,GAAG,GAAG,qEAAW,CAAC,MAAM,EAAE;AAKvC,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAE3B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IACpC,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,OAAO,GAAG,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED,eAAe,CAAC,SAAoB;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAY,OAAO,GAAG,aAAa,EAAE,SAAS,CAAC,CAAC;IACvE,CAAC;IAED,YAAY,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,OAAO,GAAG,eAAe,EAAE,EAAE,CAAC;IAChE,CAAC;IAED,eAAe,CAAC,EAAU,EAAE,SAAoB;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,OAAO,GAAG,eAAe,EAAE,EAAE,EAAE,SAAS,CAAC;IAC3E,CAAC;IAED,eAAe,CAAC,EAAU;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAY,OAAO,GAAG,eAAe,EAAE,EAAE,CAAC,CAAC;IACpE,CAAC;CACF;;YAtB2B,+DAAU;;AAFzB,gBAAgB;IAH5B,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CAwB5B;AAxB4B","file":"common-es2015.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanActivateChild,\r\n  CanLoad,\r\n  Route,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlSegment\r\n} from '@angular/router';\r\nimport {UserToken} from '../model/user-token';\r\nimport {AuthenticationService} from \"../service/auth/authentication.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  currentUser: UserToken;\r\n\r\n  constructor(private router: Router,\r\n              private authService: AuthenticationService) {\r\n    this.authService.currentUser.subscribe(\r\n      user => {\r\n        this.currentUser = user;\r\n      }\r\n    );\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.currentUser) {\r\n      return true;\r\n    } else {\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/', 'login'], {queryParams: {returnUrl: state.url}});\r\n      return false;\r\n    }\r\n  }\r\n\r\n  canActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.currentUser) {\r\n      return true;\r\n    } else {\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/', 'coach', 'login'], {queryParams: {returnUrl: state.url}});\r\n      return false;\r\n    }\r\n  }\r\n\r\n  canLoad(route: Route, segments: UrlSegment[]) {\r\n    return true;\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {environment} from \"../../../environments/environment\";\nimport {Warehouse} from \"../../model/warehouse\";\n\nconst API_URL = `${environment.apiUrl}`\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarehouseService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAllWarehouse(): Observable<Warehouse[]> {\n    return this.http.get<Warehouse[]>(API_URL + '/warehouses');\n  }\n\n  createWarehouse(warehouse: Warehouse): Observable<Warehouse> {\n    return this.http.post<Warehouse>(API_URL + '/warehouses', warehouse);\n  }\n\n  getWarehouse(id: number): Observable<Warehouse> {\n    return this.http.get<Warehouse>(API_URL + `/warehouses/${id}`)\n  }\n\n  updateWarehouse(id: number, warehouse: Warehouse): Observable<Warehouse> {\n    return this.http.put<Warehouse>(API_URL + `/warehouses/${id}`, warehouse)\n  }\n\n  deleteWarehouse(id: number): Observable<Warehouse> {\n    return this.http.delete<Warehouse>(API_URL + `/warehouses/${id}`);\n  }\n}\n"],"sourceRoot":"webpack:///"}